package pro.shushi.pamirs.base.util;

import org.apache.http.client.config.AuthSchemes;
import org.apache.http.client.config.CookieSpecs;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.Collections;
import java.util.Optional;

/**
 * HttpClients
 *
 * @author yakir on 2019/08/22 16:43.
 */
public class HttpClients {

    private static final Logger log = LoggerFactory.getLogger(HttpClients.class);

    private static HttpClientBuilder httpClientBuilder;
    private static RequestConfig     requestConfig = RequestConfig.custom()
            .setExpectContinueEnabled(true)
            .setConnectTimeout(2000)
            .setSocketTimeout(10000)
            .setConnectionRequestTimeout(2000)
            .setCookieSpec(CookieSpecs.DEFAULT)
            .setProxyPreferredAuthSchemes(Collections.singletonList(AuthSchemes.BASIC))
            .setCircularRedirectsAllowed(true)
            .build();

    static {
        try {
            SSLContext sslContext = SSLContext.getInstance("TLSv1.2");
            sslContext.init(
                    null,
                    new TrustManager[]{new X509TrustManager() {
                        @Override
                        public X509Certificate[] getAcceptedIssuers() { return null; }

                        @Override
                        public void checkServerTrusted(X509Certificate[] chain, String authType) { }

                        @Override
                        public void checkClientTrusted(X509Certificate[] chain, String authType) { }
                    }},
                    null);

            Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()
                    .register("http", PlainConnectionSocketFactory.getSocketFactory())
                    .register("https", new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE))
                    .build();
            PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);
            poolingHttpClientConnectionManager.setMaxTotal(4);                // 最大连接数
            poolingHttpClientConnectionManager.setDefaultMaxPerRoute(4);      // 同路由并发数
            httpClientBuilder = HttpClientBuilder.create()
                    .setSSLContext(sslContext)
                    .setConnectionManager(poolingHttpClientConnectionManager)
                    .setRetryHandler(new DefaultHttpRequestRetryHandler(3, true)) // 重试次数
                    .setDefaultRequestConfig(requestConfig)
            ;
        } catch (NoSuchAlgorithmException | KeyManagementException exp) {

            log.error("初始化HTTP连接池出错", exp);
        }
    }

    public static CloseableHttpClient build() {
        return Optional.ofNullable(httpClientBuilder)
                .map(_httpClientBuilder -> httpClientBuilder.build())
                .orElse(org.apache.http.impl.client.HttpClients.createDefault());
    }

}
